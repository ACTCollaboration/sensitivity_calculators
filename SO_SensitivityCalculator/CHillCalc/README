##########################

'CHillCalc' was  written in full by Charles Hill at UC Berkeley
Publish date = 2016-12-07
Latest revision = 1.0
Latest revision date = 2016-12-07

##########################

REVISION HISTORY

* 1.0 on 2016-12-07 -- a stripped-down version of the sensitivity portion of Charlie's personal sensitivity code, meant only to calculate NET and MS for Simons Observatory

##########################

OVERVIEW

CHillCalc is designed to take input parameters for an experiment and return NET and Mapping Speed for that experiment. It's been primarily used for POLARBEAR-2 and LiteBIRD forecasting, but it can make white-noise estimates for any experiment.

##########################

SOURCE CODE

There are four python modules that are located in the './src/' directory. These are importable modules and are not capable of being executed.

-- physics.py contains the 'Physics' class, which is responsible for calculating generic physical quantities, such as blackbody spectra. 
-- experiment.py contains the 'PB2' class and will someday soon contain the 'ACTPol' and 'SO' classes (note that the 'LB' class has been removed for this code base), which is responsible for handling the input parameters for the experiments of interest
-- noise.py contains the 'Noise' class, which is reponsible for calculating NEPs, NETs, Mapping Speed, and Sensitivity in uK-arcmin
-- calculation.py contains the 'Calculation' class, which does common sensitivity calculations, such as NEP/NET/MS, Psat, and optical power

##########################

OPTICAL PARAMETER FILES

Within the directory 'opticalParams' you can find the PB2 and ACTPol optical tables, which contain the emissivity, efficiency, and temperature of each element within the optical chain for each experiment. These files are imported by the 'Calculation' class when performing NET estimates.

You want to go into these files and update optical parameters as new measurements of anti-refelction coatings, loss tangents, etc. are made

##########################

EXECUTABLES

As of version 1.0, there is only a single executable:

-- PB2Sensitivity.py outputs a table to the './TXT' directory which presents the relevant sensitivity parameters for each PB2 band.

Soon, there will be more of these executables corresponding to more experiments, such as ACTPol and SO

##########################

SETTING THE ENVIRONMENT

Before running any executables, you must set the environment. 

If you are using bash, run the command:
'source env.sh'

and if you are running tcsh:
'source env.csh'

##########################

BUILDING YOUR OWN EXPERIMENT

There are a few steps that you must follow in order to build your own experiment and calculate the sensitivity forcast for it

** Create (or update) a class within the './src/experiment.py' source file. These classes contain the parameters for the experiments handled by this code, including bolometer parameters, band definitions, readout noise, etc. If you create your own experiment here, you must have the exact format and parameter names as for the 'PB2' class, as those parameters are what's looked for by the classes within the 'calculation.py' module

** Create (or update) the optical parameters within the files at './opticalParams/'. These files are text tables that contain the emissivity, efficiency, and temperature of each element within the optical chain. If you want ot update the value for a given element (perhaps due to a better-measured loss tangent or improved cooling), edit the corresponding value for (perhaps for each observation band) directly within these tables. These values are then imported by the your 'experiment.py' class  when calculations are run.

** Crate an executable at the cwd './' to generate a sensitivity table for your experiment. Be sure that the format and syntax is exactly the same as for 'PB2Sensitivity.py'


##########################

BAND LABELS

I have my own names for the atmospheric bands so that I can easily keep track of them:

-- W Band ~ 90  GHz
-- D Band ~ 150 GHz
-- S Band ~ 220 GHz
-- Q Band ~ 270 GHz

##########################